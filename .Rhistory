library(ggplot2)
intervalSteps=stepsComplete[,c("interval","steps")]
stepsAverage=ddply(intervalSteps,.(interval),summarize,averageSteps=mean(steps))
library(plyr)
library(ggplot2)
intervalSteps=stepsComplete[,c("interval","steps")]
stepsAverage=ddply(intervalSteps,.(interval),summarize,averageSteps=mean(steps))
ggplot(stepsAverage, aes(x=interval,y=averageSteps)) + geom_line() +
labs(y=expression("Average Number of Steps Taken in 5-minute Intervals"))+
labs(x=expression("5-minute Interval for All Days")) +
labs(title=expression(paste("Averge Number of Steps Taken in ",
"5-minute intervals for All Days",sep=""))) +
theme(axis.text.x=element_text(angle=25, hjust=1,vjust=1))
library(ggplot2)
?axis()
library(broman)  # for myround(number,?) # ?input number of significant figures
install.packages(c("Formula", "httr", "Rcpp", "RCurl", "swirl", "xlsx", "yaml"))
library(plyr)  # for ddply function
activity.df <- read.csv("activity.csv")  # 17568 obs. & 3 var.
dateInterval <- paste(activity.df$date," ",activity.df$interval)  # put date & interval together to use strptime function to store dates&times
dateInterval2 <- strptime(dateInterval,"%Y-%m-%d %H%M")
v3=as.character(activity.df[3])
v4=as.character(activity.df[3])
dateInterval <- paste(activity.df$date," ",v4)  # put date & interval together to use strptime function to store dates&times
dateInterval <- paste(activity.df$date,v4)  # put date & interval together to use strptime function to store dates&times
dateInterval <- paste(activity.df[2],as.character(activity.df[3]))  # put date & interval together to use strptime function to store dates&times
dateInterval <- paste(as.character(activity.df[2]),as.character(activity.df[3]))  # put date & interval together to use strptime function to store dates&times
v1=activity.df[1]
v2=activity.df[2]
v3=activity.df[3]
View(`v2`)
View(`v3`)
dateInterval <- paste((as.character(activity.df[2])),
(as.character(activity.df[3])))  # put date & interval together to use strptime function to store dates&times
x=as.character(activity.df[2])
stepsMedian=ddply(intervalSteps,.(interval),summarize,averageSteps=median(steps))
intervalSteps=stepsComplete[,c("interval","steps")]
stepsComplete=activity.df[complete.cases(activity.df),]
intervalSteps=stepsComplete[,c("interval","steps")]
stepsMedian=ddply(intervalSteps,.(interval),summarize,averageSteps=median(steps))
View(stepsMedian)
xx=ddply(completeRows,.(interval),transform,medianSteps=median(steps))
completeRows=nrow(na.omit(activity.df))
xx=ddply(completeRows,.(interval),transform,medianSteps=median(steps))
completeActivity.df=na.omit(activity.df)
xx=ddply(completeActivity,.(interval),transform,medianSteps=median(steps))
xx=ddply(completeActivity.df,.(interval),transform,medianSteps=median(steps))
View(xx)
View(stepsComplete)
activity.df <- read.csv("activity.csv")  # 17568 obs. & 3 var.
library(ggplot2)  # for ggplot function etc.
library(plyr)  # for ddply function
stepsComplete=activity.df[complete.cases(activity.df),]
stepsSum=ddply(stepsComplete,.(date),summarize,totalSteps=sum(steps))
View(stepsSum)
View(stepsSum)
stepsDateSum=ddply(stepsComplete,.(date),summarize,totalSteps=sum(steps))
hist(stepsDateSum$totalSteps, xlab="Total Steps Taken Per Day",
main="Histogram of Total Steps Taken Per Day")
intervalSteps=stepsComplete[,c("interval","steps")]
View(intervalSteps)
stepsAverage=ddply(intervalSteps,.(interval),summarize,
averageSteps=mean(steps),totalSteps=sum(steps))
View(stepsAverage)
ggplot(stepsAverage, aes(x=interval,y=averageSteps)) + geom_line() +
labs(y=expression("Average Number of Steps Taken in 5-minute Intervals"))+
labs(x=expression("5-minute Interval for All Days")) +
labs(title=expression(paste("Averge Number of Steps Taken in ",
"5-minute intervals for All Days",sep=""))) +
theme(axis.text.x=element_text(angle=25, hjust=1,vjust=1))
#scale_x_discrete(limit = cc(00,500,1000,1500,2000),
maxStepsIndex=which.max(stepsAverage[,2])
stepsAverage$interval[maxStepsIndex]
?mean()
activity.df <- read.csv("activity.csv")  # 17568 obs. & 3 var.
addMean=ddply(activity.df,.(interval),transform,
intervalMeanSteps=mean(steps,na.rm=TRUE))
library(plyr)  # for ddply function
addMean=ddply(activity.df,.(interval),transform,
intervalMeanSteps=mean(steps,na.rm=TRUE))
View(addMean)
#stepsMedian=ddply(intervalSteps,.(interval),summarize,
addMean=ddply(activity.df,.(interval),transform,
intervalMeanSteps=round(mean(steps,na.rm=TRUE),0))
View(addMean)
activity.df <- read.csv("activity.csv")  # 17568 obs. & 3 var.
library(plyr)  # for ddply function
addMean=ddply(activity.df,.(interval),transform,
intervalMeanSteps=round(mean(steps,na.rm=TRUE),0))
addedM=addMean
addMean$steps[is.na(addMean$steps)]=addMean$intervalMeanSteps
View(addMean)
View(addedM)
addMean=ddply(activity.df,.(interval),transform,
intervalMeanSteps=round(mean(steps,na.rm=TRUE),0))
addedM=addMean
for (i in nrow(addedM)){
if is.na(addedM$steps[i]){
for (i in 1:nrow(addedM)){
if is.na(addedM$steps[i]){
nrow(addedM)
allrows=nrow(addedM)
for (i in 1:allrows){
if is.na(addedM$steps[i]){
for (i in 1:allrows){
if (is.na(addedM$steps[i])){
addedM$steps[i]=addedM$intervalMeanSteps[i]
}
}
View(addedM)
View(addMean)
addMean=ddply(activity.df,.(interval),transform,
intervalMeanSteps=round(mean(steps,na.rm=TRUE),0))
addedM=addMean
for (i in 1:nrow(addedM){
addedM=addMean
for (i in 1:nrow(addedM)){
if (is.na(addedM$steps[i])){
addedM$steps[i]=addedM$intervalMeanSteps[i]
}
}
activityNAfilledIn=addedM[,c(steps,date,interval)]
activityNAfilledIn=addedM[,c("steps","date","interval")]
activity.df <- read.csv("activity.csv")  # 17568 obs. & 3 var.
library(plyr)  # for ddply function
addMean=ddply(activity.df,.(interval),transform,
intervalMeanSteps=round(mean(steps,na.rm=TRUE),0))
addedM=addMean
for (i in 1:nrow(addedM)){
if (is.na(addedM$steps[i])){
addedM$steps[i]=addedM$intervalMeanSteps[i]
}
}
activityNAfilledIn=addedM[,c("steps","date","interval")]
activityNAfilledIn$date <- strptime(as.character(activityNAfilledIn$date),"%Y-%m-%d")
str(activityNAfilledIn)
addWeekDay=ddply(activityNAfilledIn,.(date),transform,
weekDay=weekdays(date))
?ddply
addWeekDay <- function(activityNAfilledIn, date, colName="weekDay"){
activityNAfilledIn[,colName] <- as.factor(weekdays(activityNAfilledIn[,date)) return(activityNAfilledIn)
addWeekDay <- function(activityNAfilledIn, date, colName="weekDay"){
activityNAfilledIn[,colName] <- as.factor(weekdays(activityNAfilledIn[,date)) return(activityNAfilledIn)}
addWeekDay <- function(activityNAfilledIn, date, colName="weekDay"){
activityNAfilledIn[,colName] <- as.factor(weekdays(activityNAfilledIn[,date])) return(activityNAfilledIn)}
addWeekDay <- function(activityNAfilledIn, date, colName="weekDay"){
activityNAfilledIn[,colName] <- as.factor(weekdays(
activityNAfilledIn[,date]))
return(activityNAfilledIn)}
View(activityNAfilledIn)
addWeekDay
addWeekDay <- function(activityNAfilledIn, date, colName="weekDay"){
activityNAfilledIn[,colName] <- as.factor(weekdays(activityNAfilledIn[,date]))
return(activityNAfilledIn)}
#### 2. Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). The plot should look something like the following, which was creating using simulated data:
addWeekDay <- function(x, dateField, colName="weekDay"){
x[,colName] <- as.factor(weekdays(x[,dateField]))
return(x) # thanks to Jochen for noticing that I missed this }
addWeekDay <- function(x, dateField, colName="weekDay"){
x[,colName] <- as.factor(weekdays(x[,dateField]))
return(x)
# thanks to Jochen for noticing that I missed this
}
addWeekDay(activityNAfilledIn,date)
addWeekDay(activityNAfilledIn,"date")
activityWkDay=addWeekDay(activityNAfilledIn,"date")
View(activityWkDay)
v3=activity.df[3]
activityWkDay=addWeekDay(activityNOna,"date")
library(ggplot2)  # for ggplot function etc.
library(plyr)  # for ddply function
activity.df <- read.csv("activity.csv")  # 17568 obs. & 3 var.
addMean <- ddply(activity.df,.(interval),transform,
intervalMeanSteps=round(mean(steps,na.rm=TRUE),0))
addedM <- addMean
for (i in 1:nrow(addedM)){
if (is.na(addedM$steps[i])){
addedM$steps[i] <- addedM$intervalMeanSteps[i]
}
}
activityNOna <- addedM[,c("steps","date","interval")]
stepsDateSumNOna <- ddply(activityNOna,.(date),
summarize,totalSteps=sum(steps))
hist(stepsDateSumNOna$totalSteps, xlab="Total Steps Taken Per Day",
main="Histogram of Total Steps Taken Per Day - NAs Changed to Mean Steps")
mean.daily.stepsNOna <- round(mean(stepsDateSumNOna$totalSteps),0)
median.daily.stepsNOna <- median(stepsDateSumNOna$totalSteps)
mean.daily.stepsNOna
median.daily.stepsNOna
stepsComplete <- activity.df[complete.cases(activity.df),]
stepsDateSum <- ddply(stepsComplete,.(date),summarize,totalSteps=sum(steps))
mean.daily.steps <- round(mean(stepsDateSum$totalSteps),0)
median.daily.steps <- median(stepsDateSum$totalSteps)
mean.daily.steps
median.daily.steps
activityNOna$date <- strptime(as.character(activityNOna$date),"%Y-%m-%d")
addWeekDay <- function(xdf, dateField, colName="weekDay"){
xdf[,colName] <- as.factor(weekdays(xdf[,dateField]))
return(xdf)
}
activityWkDay <- addWeekDay(activityNOna,"date")
activityWkDayEnd <- activityWkDay
for (i in 1:nrow(activityWkDay)){
if (activityWkDay$weekDay[i] in c("Monday","Tuesday","Wednesday",
for (i in 1:nrow(activityWkDay)){
if (activityWkDay$weekDay[i] %in% c("Monday","Tuesday","Wednesday",
"Thursday","Friday")){
activityWkDay$weekDay[i] <- "weekday"
}else{
activityWkDay$weekDay[i] <- "weekend"
}
}
View(activityWkDayEnd)
View(activityWkDay)
addWeekDay <- function(xdf, dateField, colName="weekDayEnd"){
smtwtfs=weekdays(xdf[,dateField])
xdf[,colName] <- as.factor(smtwtfs))
addWeekDay <- function(xdf, dateField, colName="weekDayEnd"){
smtwtfs=weekdays(xdf[,dateField])
xdf[,colName] <- as.factor(smtwtfs)
return(xdf)
}
activityWkDay <- addWeekDay(activityNOna,"date")
addWeekDay <- function(xdf, dateField, colName="weekDayEnd"){
smtwtfs=weekdays(xdf[,dateField])
if smtwtfs %in c("Monday","Tuesday","Wednesday","Thursday","Friday"){
addWeekDay <- function(xdf, dateField, colName="weekDayEnd"){
smtwtfs=weekdays(xdf[,dateField])
if smtwtfs %in% c("Monday","Tuesday","Wednesday","Thursday","Friday"){
addWeekDay <- function(xdf, dateField, colName="weekDayEnd"){
#smtwtfs=weekdays(xdf[,dateField])
if weekdays(xdf[,dateField]) %in% c("Monday","Tuesday",
addWeekDay <- function(xdf, dateField, colName="weekDayEnd"){
if weekdays(xdf[,dateField]) %in% c("Monday","Tuesday",
wd=function(wkdy){
if wkdy %in% c("Monday","Tuesday", "Wednesday","Thursday","Friday"){
wd=function(wkdy){
if wkdy %in% c("Monday","Tuesday", "Wednesday","Thursday","Friday"){
wd=function(wkdy){
wkd=c("Monday","Tuesday", "Wednesday","Thursday","Friday")
if any(wkd==wkdy){
addWeekDay <- function(xdf, dateField, colName="weekDayEnd"){
xdf[,colName] <- as.factor(wd(weekdays(xdf[,dateField])))
return(xdf)
}
wd=function(wkdy){
wkd=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
if any(wkd==wkdy){
wd=function(wkdy){
wkd=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
if (any(wkd==wkdy)){
dayEnd="weekday"
} else{
dayEnd="weekend"
}
return dayEnd
wd=function(wkdy){
wkd=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
if (any(wkd==wkdy)){
dayEnd="weekday"
} else{
dayEnd="weekend"
}
}
View(activityWkDay)
activityWkDay <- addWeekDay(activityNOna,"date")
for (i in 1:nrow(activityWkDay)){
if (activityWkDay$weekDay[i] %in% c("Monday","Tuesday","Wednesday",
"Thursday","Friday")){
activityWkDay$weekDay[i] <- "weekday"
}else{
activityWkDay$weekDay[i] <- "weekend"
}
}
library(plyr)  # for ddply function
activity.df <- read.csv("activity.csv")  # 17568 obs. & 3 var.
addMean <- ddply(activity.df,.(interval),transform,
intervalMeanSteps=round(mean(steps,na.rm=TRUE),0))
addedMeans <- addMean
for (i in 1:nrow(addedMeans)){
if (is.na(addedMeans$steps[i])){
addedMeans$steps[i] <- addedMeans$intervalMeanSteps[i]
}
}
activityNOna <- addedMeans[,c("steps","date","interval")]
activityNOna$date <- strptime(as.character(activityNOna$date),"%Y-%m-%d")
activityNOna$date <- strptime(as.character(activityNOna$date),"%Y-%m-%d")
addWeekDay <- function(xdf, dateField, colName="weekDay"){
xdf[,colName] <- as.factor(weekdays(xdf[,dateField]))
return(xdf)
}
activityWkDay <- addWeekDay(activityNOna,"date")
View(activityWkDay)
stepsW <- activityWkDay
for (i in 1:nrow(activityWkDay)){
if (activityWkDay$weekDay[i] %in% c("Monday","Tuesday","Wednesday",
"Thursday","Friday")){
activityWkDay$weekDay[i] <- "weekday"
}else{
activityWkDay$weekDay[i] <- "weekend"
}
}
addWeekDay <- function(xdf, dateField, colName="weekDay",col2="weekDayEnd"){
xdf[,colName] <- as.factor(weekdays(xdf[,dateField]))
xdf[,col2] <- as.factor(weekdays(xdf[,dateField]))
return(xdf)
}
activityWkDay <- addWeekDay(activityNOna,"date")
View(activityWkDay)
for (i in 1:nrow(activityWkDay)){
if (activityWkDay$weekDay[i] %in% c("Monday","Tuesday","Wednesday",
"Thursday","Friday")){
activityWkDay$weekDayEnd[i] <- "weekday"
}else{
activityWkDay$weekDayEnd[i] <- "weekend"
}
}
addWeekDay <- function(xdf, dateField, colName="weekDay",col2="weekDayEnd"){
#      xdf[,colName] <- as.factor(weekdays(xdf[,dateField]))
#      xdf[,col2] <- as.factor(weekdays(xdf[,dateField]))
xdf[,colName] <- (weekdays(xdf[,dateField]))
xdf[,col2] <- (weekdays(xdf[,dateField]))
return(xdf)
}
activityWkDay <- addWeekDay(activityNOna,"date")
stepsW <- activityWkDay
for (i in 1:nrow(activityWkDay)){
if (activityWkDay$weekDay[i] %in% c("Monday","Tuesday","Wednesday",
"Thursday","Friday")){
activityWkDay$weekDayEnd[i] <- "weekday"
}else{
activityWkDay$weekDayEnd[i] <- "weekend"
}
}
for (i in 1:nrow(activityWkDay)){
if (activityWkDay$weekDay[i] %in% c("Saturday","Sunday")){
activityWkDay$weekDayEnd[i] <- "weekend"
}else{
activityWkDay$weekDayEnd[i] <- "weekday"
}
}
View(activityWkDay)
"weekDayEnd"),summarize,
?head()
?tail()
?tail()
library(ggplot2)  # for ggplot function etc.
library(plyr)  # for ddply function
activity.df <- read.csv("activity.csv")  # 17568 obs. & 3 var.
addedMeans <- ddply(activity.df,.(interval),transform,
intervalMeanSteps=round(mean(steps,na.rm=TRUE),0))
for (i in 1:nrow(addedMeans)){
if (is.na(addedMeans$steps[i])){
addedMeans$steps[i] <- addedMeans$intervalMeanSteps[i]
}
}
```
for (i in 1:nrow(addedMeans)){
if (is.na(addedMeans$steps[i])){
addedMeans$steps[i] <- addedMeans$intervalMeanSteps[i]
}
}
activityNOna <- addedMeans[,c("steps","date","interval")]
activityNOna$date <- strptime(as.character(activityNOna$date),"%Y-%m-%d")
addWeekDay <- function(xdf, dateField, colName="weekDay",col2="weekDayEnd"){
xdf[,colName] <- (weekdays(xdf[,dateField]))
xdf[,col2] <- (weekdays(xdf[,dateField]))
return(xdf)
}
activityWkDay <- addWeekDay(activityNOna,"date")
for (i in 1:nrow(activityWkDay)){
if (activityWkDay$weekDay[i] %in% c("Saturday","Sunday")){
activityWkDay$weekDayEnd[i] <- "weekend"
}else{
activityWkDay$weekDayEnd[i] <- "weekday"
}
}
activityWkDay$weekDayEnd <- as.factor(activityWkDay$weekDayEnd)
str(activityWkDay)
intervalStepsDayEnd <- activityWkDay[,c("interval","steps","weekDayEnd")]
stepsAverageDayEnd <- ddply(intervalStepsDayEnd,
c("interval","weekDayEnd"),summarize,
N=length(steps),
averageStepsDayEnd=mean(steps),
totalStepsDayEnd=sum(steps))
head(stepsAvergeDayEnd)
View(stepsAverageDayEnd)
head(stepsAverageDayEnd)
tail(stepsAverageDayEnd)
library(lattice)
densityplot(~stepsAverageDayEnd$interval|stepsAverageDayEnd$weekDayEnd,
main="Density Plot by weekend or weekday",
xlab="interval",
layout=c(1,2))
options("scipen"=6)  # do not use scientific notation below 6 zeros.
dotplot(~stepsAverageDayEnd$interval|stepsAverageDayEnd$weekDayEnd,
main="Steps taken during Interval Plot by weekend or weekday",
xlab="interval",
layout=c(1,2))
dotplot(~stepsAverageDayEnd$steps|stepsAverageDayEnd$weekDayEnd,
main="Steps taken during Interval Plot by weekend or weekday",
xlab="interval",
layout=c(1,2))
dotplot(stepsAverageDayEnd$steps~stepsAverageDayEnd$interval|stepsAverageDayEnd$weekDayEnd,
main="Steps taken during Interval Plot by weekend or weekday",
xlab="interval",
layout=c(1,2))
dotplot(stepsAverageDayEnd$steps~stepsAverageDayEnd$interval|as.factor(stepsAverageDayEnd$weekDayEnd),
main="Steps taken during Interval Plot by weekend or weekday",
xlab="interval",
layout=c(1,2))
View(stepsAverageDayEnd)
dotplot(stepsAverageDayEnd$averageStepsDayEnd~stepsAverageDayEnd$interval|as.factor(stepsAverageDayEnd$weekDayEnd),
main="Steps taken during Interval Plot by weekend or weekday",
xlab="interval",
layout=c(1,2))
activity <- read.csv("activity.csv")  # 17568 obs. & 3 var.
stepsComplete <- activity[complete.cases(activity),]
stepsDateSum <- ddply(stepsComplete,.(date),summarize,totalSteps=sum(steps))
library(plyr)  # for ddply function
stepsDateSum <- ddply(stepsComplete,.(date),summarize,totalSteps=sum(steps))
View(stepsDateSum)
prop.table(table(date))
barplot(stepsDateSum$totalSteps,names.arg=stepsDateSum$date, xlab="Date", ylab="Total Daily Steps"
main="Histogram of Total Steps Taken Per Day")
barplot(stepsDateSum$totalSteps,names.arg=stepsDateSum$date,
xlab="Date", ylab="Total Daily Steps",
main="Histogram of Total Steps Taken Per Day")
addedMeans <- ddply(activity,.(interval),transform,
intervalMeanSteps=round(mean(steps,na.rm=TRUE),0))
for (i in 1:nrow(addedMeans)){
if (is.na(addedMeans$steps[i])){
addedMeans$steps[i] <- addedMeans$intervalMeanSteps[i]
}
}
activityNOna <- addedMeans[,c("steps","date","interval")]
stepsDateSumNOna <- ddply(activityNOna,.(date),
summarize,totalSteps=sum(steps))
barplot(stepsDateSumNOna$totalSteps, names.arg=stepsDateSumNOna$date,
xlab="Date", ylab="Total Daily Steps",
main="Histogram of Total Steps Taken Per Day")
activityNOna$date <- strptime(as.character(activityNOna$date),"%Y-%m-%d")
activityNOna$dayType=ifelse(weekdays(activityNOna$date) %in% c("Saturday","Sunday"), "weekend", "weekday")
activityNOna$dayType <- as.factor(activityNOna$dayType)
str(activityNOna)
intervalStepsDayType <- activityNOna[,c("interval","steps","dayType")]
stepsAverageDayType <- ddply(intervalStepsDayType,
c("interval","dayType"),summarize,
N=length(steps),
averageStepsDayEnd=mean(steps),
totalStepsDayEnd=sum(steps))
head(stepsAverageDayType)
intervalStepsDayType <- activityNOna[,c("interval","steps","dayType")]
stepsAverageDayType <- ddply(intervalStepsDayType,
c("interval","dayType"),summarize,
N=length(steps),
meanSteps=mean(steps),
sumSteps=sum(steps))
head(stepsAverageDayType)
tail(stepsAverageDayType)
dotplot(stepsAverageDayType$meanSteps~stepsAverageDayType$interval|as.factor(stepsAverageDayType$dayType),
main="Steps taken during Interval Plot by weekend or weekday",
xlab="interval",
layout=c(1,2))
library(ggplot2)  # for ggplot function etc.
dotplot(stepsAverageDayType$meanSteps~stepsAverageDayType$interval|as.factor(stepsAverageDayType$dayType),
main="Steps taken during Interval Plot by weekend or weekday",
xlab="interval",
layout=c(1,2))
library(lattice)
dotplot(stepsAverageDayType$meanSteps~stepsAverageDayType$interval|as.factor(stepsAverageDayType$dayType),
main="Steps taken during Interval Plot by weekend or weekday",
xlab="interval",
layout=c(1,2))
View(stepsDateSum)
total_daily_steps <- aggregate(steps~date, activity,sum, na.rm=TRUE)
View(total_daily_steps)
?aggregate()
total_daily_steps <- aggregate(steps by date, activity, sum, na.rm=TRUE)
total_daily_steps <- aggregate(steps ~ date, activity, sum, na.rm=TRUE)
opts_chunk$set(echo=TRUE, fig.width=8, fig.height=6)
<<opts_chunk$set(echo=TRUE, fig.width=8, fig.height=6)>>
opts_chunk$set(echo=TRUE, fig.width=8, fig.height=6)
opts_chunk$set(echo=TRUE, fig.width=8, fig.height=6)
require(gridExtra)
install.packages("gridExtra")
require(gridExtra)
#xlab("Intervals at 5 Minutes)") +
xlab("Intervals at 5 Minutes") +
activity <- read.csv("activity.csv")  # 17568 obs. & 3 var.
stepsComplete <- activity[complete.cases(activity),]
stepsDateSum <- ddply(stepsComplete, .(date), summarize, totalSteps=sum(steps))
library(plyr)  # for ddply function
stepsDateSum <- ddply(stepsComplete, .(date), summarize, totalSteps=sum(steps))
total_daily_steps <- aggregate(steps ~ date, activity, sum, na.rm=TRUE)
View(stepsDateSum)
View(total_daily_steps)
count <- ddply(stepsComplete, .(date), summarize, freq=length(date))
View(count)
stepsDateSum <- ddply(stepsComplete, .(date), summarize,
freq=length(date),  totalSteps=sum(steps))
View(stepsDateSum)
stepsDateSum <- ddply(stepsComplete, .(date), summarize,
freqDate=length(date),  totalSteps=sum(steps))
View(stepsDateSum)
barplot(stepsDateSum$totalSteps, names.arg=stepsDateSum$date,
xlab="Date", ylab="Total Daily Steps",
main="Histogram of Total Steps Taken Each Day")
activityNOna$dayType <- as.factor(activityNOna$dayType)
library("knitr", lib.loc="~/R/win-library/3.0")
setwd("C:/Users/andy/github/datasciencecoursera/ReproducableResearch")
knit2html("PA1_template.Rmd")
